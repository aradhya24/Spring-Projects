package com.aurionpro.service;

import java.util.List;
import java.util.stream.Collectors;

import org.modelmapper.ModelMapper;
import org.springframework.stereotype.Service;

import com.aurionpro.dto.AccountCreateRequest;
import com.aurionpro.dto.AccountSummary;
import com.aurionpro.entity.Account;
import com.aurionpro.entity.Customer;
import com.aurionpro.repository.AccountRepo;
import com.aurionpro.repository.CustomerRepo;

import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class AccountServiceImpl implements AccountService {

    private final CustomerRepo customerRepository;
    private final AccountRepo accountRepository;
    private final ModelMapper modelMapper;

    @Override
    public AccountSummary createAccount(AccountCreateRequest request) {
        Customer customer = customerRepository.findById(request.getCustomerId())
                .orElseThrow(() -> new RuntimeException("Customer not found"));

        Account account = Account.builder()
                .accountNumber(request.getAccountNumber())
                .accountType(request.getAccountType())
                .balance(request.getBalance())
                .customer(customer)
                .build();

        Account saved = accountRepository.saveAndFlush(account);

        // Map to AccountSummary
        AccountSummary dto = modelMapper.map(saved, AccountSummary.class);
        dto.setCustomerId(customer.getId());
        return dto;
    }

    @Override
    public List<AccountSummary> getAccountsByCustomerId(Long customerId) {
        Customer customer = customerRepository.findById(customerId)
                .orElseThrow(() -> new RuntimeException("Customer not found"));

        return customer.getAccounts().stream()
                .map(acc -> {
                    AccountSummary dto = modelMapper.map(acc, AccountSummary.class);
                    dto.setCustomerId(customerId);
                    return dto;
                })
                .collect(Collectors.toList());
    }

    @Override
    public AccountSummary getAccountById(Long accountId) {
        Account account = accountRepository.findById(accountId)
                .orElseThrow(() -> new RuntimeException("Account not found"));

        AccountSummary dto = modelMapper.map(account, AccountSummary.class);
        dto.setCustomerId(account.getCustomer().getId());
        return dto;
    }

    @Override
    public List<AccountSummary> getAllAccounts() {
        List<Account> accounts = accountRepository.findAll();

        return accounts.stream()
                .map(a -> {
                    AccountSummary dto = new AccountSummary();
                    dto.setAccountId(a.getAccountId());
                    dto.setAccountNumber(a.getAccountNumber());
                    dto.setAccountType(a.getAccountType());
                    dto.setBalance(a.getBalance());
                    dto.setCustomerId(a.getCustomer() != null ? a.getCustomer().getId() : null);
                    return dto;
                })
                .toList();
    }

}
