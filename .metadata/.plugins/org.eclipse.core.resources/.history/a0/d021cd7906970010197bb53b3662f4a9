package com.aurionpro.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.AccessDeniedException;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.aurionpro.dto.JwtAuthResponse;
import com.aurionpro.dto.LoginDto;
import com.aurionpro.dto.RegistrationDto;
import com.aurionpro.dto.UserResponseDto;
import com.aurionpro.service.AuthService;



@RestController
@RequestMapping("/api")
public class LoginController {
	
	@Autowired
	private AuthService authService;
	
	@PostMapping("/register")
	@PreAuthorize("hasAnyRole('ADMIN','SUPERADMIN')")
	public ResponseEntity<UserResponseDto> register(@RequestBody RegistrationDto registerDto)
	{
		if (registerDto.getRole().equalsIgnoreCase("ADMIN") && !hasRole("SUPERADMIN")) {
	        throw new AccessDeniedException("Only SUPERADMIN can register an ADMIN user");
	    }
		
		
		// Only ADMIN or SUPERADMIN can create CUSTOMER
		if (registerDto.getRole().equalsIgnoreCase("CUSTOMER") &&
		        !(hasRole("ADMIN") || hasRole("SUPERADMIN"))) {
		        throw new AccessDeniedException("Only ADMIN or SUPERADMIN can register a CUSTOMER");
		    }
		
		return ResponseEntity.ok(authService.register(registerDto));
		
	}
	
	@PostMapping("/login")
	public ResponseEntity<JwtAuthResponse> login(@RequestBody LoginDto loginDto)
	{
		
		String token=authService.login(loginDto);
		JwtAuthResponse jwtAuthResponse=new JwtAuthResponse();
		jwtAuthResponse.setAccessToken(token);
		
		return ResponseEntity.ok(jwtAuthResponse);
	}
	
	
	private boolean hasRole(String role) {
	    return org.springframework.security.core.context.SecurityContextHolder
	            .getContext()
	            .getAuthentication()
	            .getAuthorities()
	            .stream()
	            .anyMatch(granted -> granted.getAuthority().equals("ROLE_" + role));
	}


}
