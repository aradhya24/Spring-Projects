package com.aurionpro.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.aurionpro.dto.JwtAuthResponse;
import com.aurionpro.dto.LoginDto;
import com.aurionpro.dto.RegistrationDto;
import com.aurionpro.dto.UserResponseDto;
import com.aurionpro.service.AuthService;

@RestController
@RequestMapping("/api")
public class LoginController {

    @Autowired
    private AuthService authService;

    // ✅ Register (needs ADMIN or SUPERADMIN token)
    @PostMapping("/register")
    @PreAuthorize("hasAnyRole('ADMIN','SUPER_ADMIN')")
    public ResponseEntity<UserResponseDto> register(@RequestBody RegistrationDto registerDto) {

        String role = registerDto.getRole().toUpperCase();

//        if ("ADMIN".equals(role) && !hasRole("SUPER_ADMIN")) {
//            throw new RuntimeException("Only SUPER_ADMIN can register an ADMIN user");
//        }

        if ("CUSTOMER".equals(role) && !(hasRole("ADMIN") || hasRole("SUPER_ADMIN"))) {
            throw new RuntimeException("Only ADMIN or SUPER_ADMIN can register a CUSTOMER");
        }

        // service will add "ROLE_" prefix before saving
        return ResponseEntity.ok(authService.register(registerDto));
    }

    // ✅ Login is public
    @PostMapping("/login")
    public ResponseEntity<JwtAuthResponse> login(@RequestBody LoginDto loginDto) {
        String token = authService.login(loginDto);
        return ResponseEntity.ok(new JwtAuthResponse(token ,"Bearer"));
    }

    private boolean hasRole(String role) {
        return org.springframework.security.core.context.SecurityContextHolder
                .getContext()
                .getAuthentication()
                .getAuthorities()
                .stream()
                .anyMatch(granted -> granted.getAuthority().equals(role));
    }
}
